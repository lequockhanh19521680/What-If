custom:
  serverless-offline:
    httpPort: 8080
service: what-if-studio-backend

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  memorySize: 1024
  timeout: 300
  environment:
    STAGE: ${self:provider.stage}
    PROJECTS_TABLE: ${self:service}-projects-${self:provider.stage}
    USERS_TABLE: ${self:service}-users-${self:provider.stage}
    MEDIA_BUCKET: ${self:service}-media-${self:provider.stage}
    BEDROCK_REGION: us-east-1
    BEDROCK_MODEL_ID: anthropic.claude-3-sonnet-20240229-v1:0
    RDS_HOST: ${ssm:/what-if/rds-host}
    RDS_PORT: ${ssm:/what-if/rds-port, '3306'}
    RDS_USER: ${ssm:/what-if/rds-user}
    RDS_PASSWORD: ${ssm:/what-if/rds-password}
    RDS_DATABASE: ${ssm:/what-if/rds-database}
    JWT_SECRET: ${ssm:/what-if/jwt-secret}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:ListFoundationModels
            - bedrock:InvokeModelWithResponseStream
          Resource:
            - arn:aws:bedrock:us-east-1::foundation-model/*
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:PutObjectAcl
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::${self:provider.environment.MEDIA_BUCKET}"
            - "arn:aws:s3:::${self:provider.environment.MEDIA_BUCKET}/*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROJECTS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

layers:
  nodeModules:
    path: layers
    compatibleRuntimes:
      - nodejs18.x

functions:
  generateContent:
    handler: handlers/generateContent.handler
    events:
      - http:
          path: /api/generate
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    layers:
      - { Ref: NodeModulesLambdaLayer }
      - arn:aws:lambda:${self:provider.region}:580247275435:layer:LambdaInsightsExtension:14

  getProject:
    handler: handlers/getProject.handler
    events:
      - http:
          path: /api/project/{projectId}
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    layers:
      - { Ref: NodeModulesLambdaLayer }

  getUserProjects:
    handler: handlers/getUserProjects.handler
    events:
      - http:
          path: /api/user/{userId}/projects
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    layers:
      - { Ref: NodeModulesLambdaLayer }

  createShareLink:
    handler: handlers/createShareLink.handler
    events:
      - http:
          path: /api/share
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    layers:
      - { Ref: NodeModulesLambdaLayer }

  # Auth functions
  signUp:
    handler: handlers/auth.signUp
    events:
      - http:
          path: /api/auth/signup
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  signIn:
    handler: handlers/auth.signIn
    events:
      - http:
          path: /api/auth/signin
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  getCurrentUser:
    handler: handlers/auth.getCurrentUser
    events:
      - http:
          path: /api/auth/me
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  resetPassword:
    handler: handlers/auth.resetPassword
    events:
      - http:
          path: /api/auth/reset-password
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  confirmResetPassword:
    handler: handlers/auth.confirmResetPassword
    events:
      - http:
          path: /api/auth/confirm-reset
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  signOut:
    handler: handlers/auth.signOut
    events:
      - http:
          path: /api/auth/signout
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

resources:
  Resources:
    ProjectsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PROJECTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: projectId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: projectId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserProjectsIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH

    MediaBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.MEDIA_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
              MaxAge: 3000

    MediaBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref MediaBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource:
                - !GetAtt MediaBucket.Arn
                - !Sub "${MediaBucket.Arn}/*"

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false

    CognitoGoogleIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderName: Google
        ProviderType: Google
        UserPoolId: !Ref CognitoUserPool
        ProviderDetails:
          client_id: ${ssm:/what-if/google-client-id}
          client_secret: ${ssm:/what-if/google-client-secret}
          authorize_scopes: "openid email profile"
        AttributeMapping:
          email: email
          username: sub

    CognitoFacebookIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderName: Facebook
        ProviderType: Facebook
        UserPoolId: !Ref CognitoUserPool
        ProviderDetails:
          client_id: ${ssm:/what-if/facebook-client-id}
          client_secret: ${ssm:/what-if/facebook-client-secret}
          authorize_scopes: "email public_profile"
        AttributeMapping:
          email: email
          username: id

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      DependsOn:
        - CognitoGoogleIdentityProvider
        - CognitoFacebookIdentityProvider
      Properties:
        ClientName: ${self:service}-user-pool-client-${self:provider.stage}
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
        SupportedIdentityProviders:
          - COGNITO
          - Google
          - Facebook
        CallbackURLs:
          - http://localhost:3000/auth/callback
          - https://yourdomain.com/auth/callback
        LogoutURLs:
          - http://localhost:3000
          - https://yourdomain.com

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-restApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-rootResourceId

    UserPoolId:
      Value: !Ref CognitoUserPool
      Export:
        Name: ${self:service}-${self:provider.stage}-user-pool-id

    UserPoolClientId:
      Value: !Ref CognitoUserPoolClient
      Export:
        Name: ${self:service}-${self:provider.stage}-user-pool-client-id

package:
  exclude:
    - node_modules/**
    - docs/**
    - test/**
    - .git/**
    - .env
    - .env.example
    - frontend/**
    - README.md
